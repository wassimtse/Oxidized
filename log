# -*- coding: utf-8 -*-
"""
@author: RaniaDRIOUICH
"""
# pylint: disable=R0201

import logging
import os
from datetime import datetime
from e_mailmanaging import EMail

class LogEmailMattermost:

    def __init__(self):
        self.nb_error = 0
        self.nb_warning = 0
        # Initialize logging object.
        logging.basicConfig(
            # Log file
            filename="log.log",
            # This is an info log
            level=logging.INFO,
            # Log file writting format
            format="%(asctime)s - %(levelname)s - %(message)s",
            datefmt="%d/%m/%Y %I:%M:%S %p",
        )

    def info(self, current_action, message=None):
        """
        Add info type to all logs, such as log.log, notification and e-mail content.

        Parameters
        ----------
        current_action: string
            Action appears in recap file such as "JSON read", "send file" ...
        message: string, optional
            Add specific message.  The default is None.

        Returns
        -------
        None.

        """

        if message is not None:
            logging.info("%s: %s", current_action, message)
        else:
            logging.info('Task: "%s" went smoothly.', current_action)

    def warning(self, current_action, message=None):
        """
        Create warning to be printed only in log file and e-mail recap.

        Parameters
        ----------
        current_action: string
            Action appears in recap file such as "JSON read", "send file" ...
        message : string
            Add specific message.  The default is None.

        Returns
        -------
        None.

        """

        self.warning_nb += 1

        if message is not None:
            logging.warning("%s: %s", current_action, message)
        else:
            logging.warning('Task: "%s" raised a warning.', current_action)

    def error(self, current_action, message=None):
        """
        Add error type to all logs, such as log.log, notification and e-mail content.

        Parameters
        ----------
        current_action : string
            Action appears in recap file such as "JSON read", "send file" ...
        message : string, optional
            Add specific message. The default is None.

        Returns
        -------
        None.

        """

        self.error_nb += 1

        if message is not None:
            logging.error("%s: %s", current_action, message)
        else:
            logging.error('Task: "%s" failed.', current_action)

    def critical(self, current_action, message=None):
        """
        Add critical type to log file.

        Parameters
        ----------
        current_action : string
            Action appears in recap file such as "JSON read", "send file" ...
        message : string, optional
            Add specific message. The default is None.

        Returns
        -------
        None.

        """

        if message is not None:
            logging.critical("%s: %s", current_action, message)
        else:
            logging.critical('Task: "%s" failed.', current_action)

    def get_logfile(self):
        """
        Get log filename, useful to attach log to e-mail.

        Parameters
        ----------

        Returns
        -------
        log_name :string
            Name of the current log file.

        """

        return str(
            os.path.basename(logging.getLoggerClass().root.handlers[0].baseFilename)
        )

    def send_all(self):
        """
        Send e-mail and mattermost notification.

        Parameters
        ----------
        None.

        Returns
        -------
        None.

        """

        if self.error_nb > 0 and self.warning_nb > 0:
            msg = (
                    "Not done with "
                    + str(self.error_nb)
                    + " errors and "
                    + str(self.warning_nb)
                    + " warnings."
            )
        elif self.error_nb > 0:
            msg = "Not done with " + str(self.error_nb) + " errors."
        elif self.warning_nb > 0:
            msg = "Done with " + str(self.warning_nb) + " warnings."
        else:
            msg = "Done"

        if self.error_nb > 0:
            logging.error(msg)
        else:
            logging.info(msg)


